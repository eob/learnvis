#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class Geometry:
  """
  Attributes:
   - x
   - y
   - h
   - w
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'x', None, None, ), # 1
    (2, TType.I32, 'y', None, None, ), # 2
    (3, TType.I32, 'h', None, None, ), # 3
    (4, TType.I32, 'w', None, None, ), # 4
  )

  def __init__(self, x=None, y=None, h=None, w=None,):
    self.x = x
    self.y = y
    self.h = h
    self.w = w

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.x = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.y = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.h = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.w = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Geometry')
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.I32, 1)
      oprot.writeI32(self.x)
      oprot.writeFieldEnd()
    if self.y is not None:
      oprot.writeFieldBegin('y', TType.I32, 2)
      oprot.writeI32(self.y)
      oprot.writeFieldEnd()
    if self.h is not None:
      oprot.writeFieldBegin('h', TType.I32, 3)
      oprot.writeI32(self.h)
      oprot.writeFieldEnd()
    if self.w is not None:
      oprot.writeFieldBegin('w', TType.I32, 4)
      oprot.writeI32(self.w)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WebSource:
  """
  Attributes:
   - url
   - kind
   - domain
   - content
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'url', None, None, ), # 1
    (2, TType.STRING, 'kind', None, None, ), # 2
    (3, TType.STRING, 'domain', None, None, ), # 3
    (4, TType.STRING, 'content', None, None, ), # 4
  )

  def __init__(self, url=None, kind=None, domain=None, content=None,):
    self.url = url
    self.kind = kind
    self.domain = domain
    self.content = content

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.kind = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.domain = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WebSource')
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 1)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.kind is not None:
      oprot.writeFieldBegin('kind', TType.STRING, 2)
      oprot.writeString(self.kind)
      oprot.writeFieldEnd()
    if self.domain is not None:
      oprot.writeFieldBegin('domain', TType.STRING, 3)
      oprot.writeString(self.domain)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 4)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ScrapeStatus:
  """
  Attributes:
   - viewsStatic
   - viewsLive
   - facetsStatic
   - facetsLive
   - dataStatic
   - dataLive
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    (7, TType.BOOL, 'viewsStatic', None, False, ), # 7
    (8, TType.BOOL, 'viewsLive', None, False, ), # 8
    (9, TType.BOOL, 'facetsStatic', None, False, ), # 9
    (10, TType.BOOL, 'facetsLive', None, False, ), # 10
    (11, TType.BOOL, 'dataStatic', None, False, ), # 11
    (12, TType.BOOL, 'dataLive', None, False, ), # 12
  )

  def __init__(self, viewsStatic=thrift_spec[7][4], viewsLive=thrift_spec[8][4], facetsStatic=thrift_spec[9][4], facetsLive=thrift_spec[10][4], dataStatic=thrift_spec[11][4], dataLive=thrift_spec[12][4],):
    self.viewsStatic = viewsStatic
    self.viewsLive = viewsLive
    self.facetsStatic = facetsStatic
    self.facetsLive = facetsLive
    self.dataStatic = dataStatic
    self.dataLive = dataLive

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 7:
        if ftype == TType.BOOL:
          self.viewsStatic = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.viewsLive = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.facetsStatic = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.BOOL:
          self.facetsLive = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.BOOL:
          self.dataStatic = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.BOOL:
          self.dataLive = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ScrapeStatus')
    if self.viewsStatic is not None:
      oprot.writeFieldBegin('viewsStatic', TType.BOOL, 7)
      oprot.writeBool(self.viewsStatic)
      oprot.writeFieldEnd()
    if self.viewsLive is not None:
      oprot.writeFieldBegin('viewsLive', TType.BOOL, 8)
      oprot.writeBool(self.viewsLive)
      oprot.writeFieldEnd()
    if self.facetsStatic is not None:
      oprot.writeFieldBegin('facetsStatic', TType.BOOL, 9)
      oprot.writeBool(self.facetsStatic)
      oprot.writeFieldEnd()
    if self.facetsLive is not None:
      oprot.writeFieldBegin('facetsLive', TType.BOOL, 10)
      oprot.writeBool(self.facetsLive)
      oprot.writeFieldEnd()
    if self.dataStatic is not None:
      oprot.writeFieldBegin('dataStatic', TType.BOOL, 11)
      oprot.writeBool(self.dataStatic)
      oprot.writeFieldEnd()
    if self.dataLive is not None:
      oprot.writeFieldBegin('dataLive', TType.BOOL, 12)
      oprot.writeBool(self.dataLive)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Property:
  """
  Attributes:
   - name
   - kind
   - features
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'kind', None, "string", ), # 2
    (3, TType.MAP, 'features', (TType.STRING,None,TType.STRING,None), None, ), # 3
  )

  def __init__(self, name=None, kind=thrift_spec[2][4], features=None,):
    self.name = name
    self.kind = kind
    self.features = features

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.kind = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.features = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin() 
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = iprot.readString();
            self.features[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Property')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.kind is not None:
      oprot.writeFieldBegin('kind', TType.STRING, 2)
      oprot.writeString(self.kind)
      oprot.writeFieldEnd()
    if self.features is not None:
      oprot.writeFieldBegin('features', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.features))
      for kiter7,viter8 in self.features.items():
        oprot.writeString(kiter7)
        oprot.writeString(viter8)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Triple:
  """
  Attributes:
   - s
   - p
   - o
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 's', None, None, ), # 1
    (2, TType.STRING, 'p', None, None, ), # 2
    (3, TType.STRING, 'o', None, None, ), # 3
  )

  def __init__(self, s=None, p=None, o=None,):
    self.s = s
    self.p = p
    self.o = o

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.s = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.p = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.o = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Triple')
    if self.s is not None:
      oprot.writeFieldBegin('s', TType.STRING, 1)
      oprot.writeString(self.s)
      oprot.writeFieldEnd()
    if self.p is not None:
      oprot.writeFieldBegin('p', TType.STRING, 2)
      oprot.writeString(self.p)
      oprot.writeFieldEnd()
    if self.o is not None:
      oprot.writeFieldBegin('o', TType.STRING, 3)
      oprot.writeString(self.o)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Data:
  """
  Attributes:
   - sources
   - triples
   - schema
   - features
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'sources', (TType.STRUCT,(WebSource, WebSource.thrift_spec)), None, ), # 1
    (2, TType.LIST, 'triples', (TType.STRUCT,(Triple, Triple.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'schema', (TType.STRUCT,(Property, Property.thrift_spec)), None, ), # 3
    (4, TType.MAP, 'features', (TType.STRING,None,TType.STRING,None), None, ), # 4
  )

  def __init__(self, sources=None, triples=None, schema=None, features=None,):
    self.sources = sources
    self.triples = triples
    self.schema = schema
    self.features = features

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.sources = []
          (_etype12, _size9) = iprot.readListBegin()
          for _i13 in xrange(_size9):
            _elem14 = WebSource()
            _elem14.read(iprot)
            self.sources.append(_elem14)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.triples = []
          (_etype18, _size15) = iprot.readListBegin()
          for _i19 in xrange(_size15):
            _elem20 = Triple()
            _elem20.read(iprot)
            self.triples.append(_elem20)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.schema = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = Property()
            _elem26.read(iprot)
            self.schema.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.features = {}
          (_ktype28, _vtype29, _size27 ) = iprot.readMapBegin() 
          for _i31 in xrange(_size27):
            _key32 = iprot.readString();
            _val33 = iprot.readString();
            self.features[_key32] = _val33
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Data')
    if self.sources is not None:
      oprot.writeFieldBegin('sources', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.sources))
      for iter34 in self.sources:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.triples is not None:
      oprot.writeFieldBegin('triples', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.triples))
      for iter35 in self.triples:
        iter35.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.schema is not None:
      oprot.writeFieldBegin('schema', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.schema))
      for iter36 in self.schema:
        iter36.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.features is not None:
      oprot.writeFieldBegin('features', TType.MAP, 4)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.features))
      for kiter37,viter38 in self.features.items():
        oprot.writeString(kiter37)
        oprot.writeString(viter38)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Facet:
  """
  Attributes:
   - label
   - kind
   - expression
   - html
   - orientation
   - geometry
   - htmlProps
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'label', None, None, ), # 1
    (2, TType.STRING, 'kind', None, None, ), # 2
    (3, TType.STRING, 'expression', None, None, ), # 3
    (4, TType.STRING, 'html', None, None, ), # 4
    (5, TType.STRING, 'orientation', None, None, ), # 5
    (6, TType.STRUCT, 'geometry', (Geometry, Geometry.thrift_spec), None, ), # 6
    (7, TType.MAP, 'htmlProps', (TType.STRING,None,TType.STRING,None), None, ), # 7
  )

  def __init__(self, label=None, kind=None, expression=None, html=None, orientation=None, geometry=None, htmlProps=None,):
    self.label = label
    self.kind = kind
    self.expression = expression
    self.html = html
    self.orientation = orientation
    self.geometry = geometry
    self.htmlProps = htmlProps

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.label = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.kind = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.expression = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.html = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.orientation = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.geometry = Geometry()
          self.geometry.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.MAP:
          self.htmlProps = {}
          (_ktype40, _vtype41, _size39 ) = iprot.readMapBegin() 
          for _i43 in xrange(_size39):
            _key44 = iprot.readString();
            _val45 = iprot.readString();
            self.htmlProps[_key44] = _val45
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Facet')
    if self.label is not None:
      oprot.writeFieldBegin('label', TType.STRING, 1)
      oprot.writeString(self.label)
      oprot.writeFieldEnd()
    if self.kind is not None:
      oprot.writeFieldBegin('kind', TType.STRING, 2)
      oprot.writeString(self.kind)
      oprot.writeFieldEnd()
    if self.expression is not None:
      oprot.writeFieldBegin('expression', TType.STRING, 3)
      oprot.writeString(self.expression)
      oprot.writeFieldEnd()
    if self.html is not None:
      oprot.writeFieldBegin('html', TType.STRING, 4)
      oprot.writeString(self.html)
      oprot.writeFieldEnd()
    if self.orientation is not None:
      oprot.writeFieldBegin('orientation', TType.STRING, 5)
      oprot.writeString(self.orientation)
      oprot.writeFieldEnd()
    if self.geometry is not None:
      oprot.writeFieldBegin('geometry', TType.STRUCT, 6)
      self.geometry.write(oprot)
      oprot.writeFieldEnd()
    if self.htmlProps is not None:
      oprot.writeFieldBegin('htmlProps', TType.MAP, 7)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.htmlProps))
      for kiter46,viter47 in self.htmlProps.items():
        oprot.writeString(kiter46)
        oprot.writeString(viter47)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class View:
  """
  Attributes:
   - label
   - kind
   - expression
   - html
   - geometry
   - htmlProps
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'label', None, None, ), # 1
    (2, TType.STRING, 'kind', None, None, ), # 2
    (3, TType.STRING, 'expression', None, None, ), # 3
    (4, TType.STRING, 'html', None, None, ), # 4
    (5, TType.STRUCT, 'geometry', (Geometry, Geometry.thrift_spec), None, ), # 5
    (6, TType.MAP, 'htmlProps', (TType.STRING,None,TType.STRING,None), None, ), # 6
  )

  def __init__(self, label=None, kind=None, expression=None, html=None, geometry=None, htmlProps=None,):
    self.label = label
    self.kind = kind
    self.expression = expression
    self.html = html
    self.geometry = geometry
    self.htmlProps = htmlProps

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.label = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.kind = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.expression = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.html = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.geometry = Geometry()
          self.geometry.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.htmlProps = {}
          (_ktype49, _vtype50, _size48 ) = iprot.readMapBegin() 
          for _i52 in xrange(_size48):
            _key53 = iprot.readString();
            _val54 = iprot.readString();
            self.htmlProps[_key53] = _val54
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('View')
    if self.label is not None:
      oprot.writeFieldBegin('label', TType.STRING, 1)
      oprot.writeString(self.label)
      oprot.writeFieldEnd()
    if self.kind is not None:
      oprot.writeFieldBegin('kind', TType.STRING, 2)
      oprot.writeString(self.kind)
      oprot.writeFieldEnd()
    if self.expression is not None:
      oprot.writeFieldBegin('expression', TType.STRING, 3)
      oprot.writeString(self.expression)
      oprot.writeFieldEnd()
    if self.html is not None:
      oprot.writeFieldBegin('html', TType.STRING, 4)
      oprot.writeString(self.html)
      oprot.writeFieldEnd()
    if self.geometry is not None:
      oprot.writeFieldBegin('geometry', TType.STRUCT, 5)
      self.geometry.write(oprot)
      oprot.writeFieldEnd()
    if self.htmlProps is not None:
      oprot.writeFieldBegin('htmlProps', TType.MAP, 6)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.htmlProps))
      for kiter55,viter56 in self.htmlProps.items():
        oprot.writeString(kiter55)
        oprot.writeString(viter56)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Lens:
  """
  Attributes:
   - html
   - containedFields
   - htmlProps
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'html', None, None, ), # 1
    (2, TType.LIST, 'containedFields', (TType.STRING,None), None, ), # 2
    (3, TType.MAP, 'htmlProps', (TType.STRING,None,TType.STRING,None), None, ), # 3
  )

  def __init__(self, html=None, containedFields=None, htmlProps=None,):
    self.html = html
    self.containedFields = containedFields
    self.htmlProps = htmlProps

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.html = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.containedFields = []
          (_etype60, _size57) = iprot.readListBegin()
          for _i61 in xrange(_size57):
            _elem62 = iprot.readString();
            self.containedFields.append(_elem62)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.htmlProps = {}
          (_ktype64, _vtype65, _size63 ) = iprot.readMapBegin() 
          for _i67 in xrange(_size63):
            _key68 = iprot.readString();
            _val69 = iprot.readString();
            self.htmlProps[_key68] = _val69
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Lens')
    if self.html is not None:
      oprot.writeFieldBegin('html', TType.STRING, 1)
      oprot.writeString(self.html)
      oprot.writeFieldEnd()
    if self.containedFields is not None:
      oprot.writeFieldBegin('containedFields', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.containedFields))
      for iter70 in self.containedFields:
        oprot.writeString(iter70)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.htmlProps is not None:
      oprot.writeFieldBegin('htmlProps', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.htmlProps))
      for kiter71,viter72 in self.htmlProps.items():
        oprot.writeString(kiter71)
        oprot.writeString(viter72)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Visualization:
  """
  Attributes:
   - source
   - data
   - views
   - facets
   - lenses
   - scrapeStatus
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'source', (WebSource, WebSource.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'data', (Data, Data.thrift_spec), None, ), # 2
    (3, TType.LIST, 'views', (TType.STRUCT,(View, View.thrift_spec)), None, ), # 3
    (4, TType.LIST, 'facets', (TType.STRUCT,(Facet, Facet.thrift_spec)), None, ), # 4
    (5, TType.LIST, 'lenses', (TType.STRUCT,(Lens, Lens.thrift_spec)), None, ), # 5
    (6, TType.STRUCT, 'scrapeStatus', (ScrapeStatus, ScrapeStatus.thrift_spec), None, ), # 6
  )

  def __init__(self, source=None, data=None, views=None, facets=None, lenses=None, scrapeStatus=None,):
    self.source = source
    self.data = data
    self.views = views
    self.facets = facets
    self.lenses = lenses
    self.scrapeStatus = scrapeStatus

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.source = WebSource()
          self.source.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.data = Data()
          self.data.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.views = []
          (_etype76, _size73) = iprot.readListBegin()
          for _i77 in xrange(_size73):
            _elem78 = View()
            _elem78.read(iprot)
            self.views.append(_elem78)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.facets = []
          (_etype82, _size79) = iprot.readListBegin()
          for _i83 in xrange(_size79):
            _elem84 = Facet()
            _elem84.read(iprot)
            self.facets.append(_elem84)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.lenses = []
          (_etype88, _size85) = iprot.readListBegin()
          for _i89 in xrange(_size85):
            _elem90 = Lens()
            _elem90.read(iprot)
            self.lenses.append(_elem90)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.scrapeStatus = ScrapeStatus()
          self.scrapeStatus.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Visualization')
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.STRUCT, 1)
      self.source.write(oprot)
      oprot.writeFieldEnd()
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.STRUCT, 2)
      self.data.write(oprot)
      oprot.writeFieldEnd()
    if self.views is not None:
      oprot.writeFieldBegin('views', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.views))
      for iter91 in self.views:
        iter91.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.facets is not None:
      oprot.writeFieldBegin('facets', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.facets))
      for iter92 in self.facets:
        iter92.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.lenses is not None:
      oprot.writeFieldBegin('lenses', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.lenses))
      for iter93 in self.lenses:
        iter93.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.scrapeStatus is not None:
      oprot.writeFieldBegin('scrapeStatus', TType.STRUCT, 6)
      self.scrapeStatus.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
